#!/usr/bin/env bash
set -euo pipefail

# --- CONFIGURATION ---
WORKDIR="debian-remaster"
# This is a direct link to the Debian 12 (Bookworm) standard live ISO
DEBIAN_ISO_URL="https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/debian-live-13.1.0-amd64-standard.iso"
DEBIAN_ISO_FILE="$(basename "$DEBIAN_ISO_URL")"
# ---

# --- Find your application ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DIST_DIR="$SCRIPT_DIR/dist"
if [ ! -d "$DIST_DIR" ]; then
  echo "❌ ERROR: 'dist/' directory not found. Build your app with PyInstaller first."
  exit 1
fi
BINARY_PATH="$(find "$DIST_DIR" -maxdepth 1 -type f -executable | head -n1 || find "$DIST_DIR" -maxdepth 1 -type f | head -n1)"
BINARY_NAME="$(basename "$BINARY_PATH")"
echo "📦 Using binary: $BINARY_PATH"

# --- Install necessary tools ---
echo "🔧 Installing required tools..."
sudo apt-get update
sudo apt-get install -y squashfs-tools xorriso rsync

# --- Prepare the workspace ---
echo "🧹 Cleaning up and preparing the workspace..."
sudo rm -rf "$WORKDIR" 2>/dev/null || true
mkdir -p "$WORKDIR"
cd "$WORKDIR"

# --- PHASE 1: Download and Extract the Official Debian ISO ---
if [ ! -f "$DEBIAN_ISO_FILE" ]; then
  echo "🌐 Downloading Debian Live ISO..."
  wget --progress=bar:force -O "$DEBIAN_ISO_FILE" "$DEBIAN_ISO_URL"
fi

echo "💿 Extracting the official ISO contents..."
mkdir -p iso_mount new_iso
sudo mount "$DEBIAN_ISO_FILE" iso_mount
sudo rsync -a iso_mount/ new_iso/

# --- FIX #1: Auto-detect the Debian version (codename) from the ISO ---
DEBIAN_DISTRO=$(grep -oP 'CODENAME=\K\w+' iso_mount/etc/os-release)
echo "✅ Detected Debian version: $DEBIAN_DISTRO"
sudo umount iso_mount

echo "📁 Unpacking the main filesystem..."
sudo unsquashfs new_iso/live/filesystem.squashfs

# --- PHASE 2: Customize the System in a chroot ---
echo "🚀 Entering the system to install your app and GUI..."

# Copy your application into the filesystem
sudo cp "$BINARY_PATH" "squashfs-root/usr/local/bin/$BINARY_NAME"
sudo chmod +x "squashfs-root/usr/local/bin/$BINARY_NAME"

# Create a setup script to be run inside the chroot
cat > setup_chroot.sh <<SETUP_SCRIPT
#!/bin/bash
set -e
export DEBIAN_FRONTEND=noninteractive

# FIX #3: Disable the original CD-ROM repository to prevent 'file:/' errors
echo "--- Disabling local CD-ROM repository ---"
# This file is generated by live-build and points to the CD-ROM
[ -f /etc/apt/sources.list.d/live.sources ] && rm /etc/apt/sources.list.d/live.sources

echo "--- Configuring APT sources for '$DEBIAN_DISTRO' ---"
cat > /etc/apt/sources.list <<EOF
deb http://deb.debian.org/debian/ ${DEBIAN_DISTRO} main contrib non-free non-free-firmware
deb http://deb.debian.org/debian/ ${DEBIAN_DISTRO}-updates main contrib non-free non-free-firmware  
deb http://security.debian.org/debian-security/ ${DEBIAN_DISTRO}-security main contrib non-free non-free-firmware
EOF

echo "--- Installing minimal GUI and tools ---"
apt-get update
apt-get install -y --no-install-recommends \
  xserver-xorg \
  xinit \
  openbox \
  python3-tk \
  hdparm \
  util-linux

echo "--- Configuring automatic login and GUI startup ---"
mkdir -p /etc/systemd/system/getty@tty1.service.d
cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf <<AUTOLOGIN
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin user --noclear %I \$TERM
AUTOLOGIN

cat >> /home/user/.profile <<PROFILE
if [ -z "\$DISPLAY" ] && [ "\$(tty)" = "/dev/tty1" ]; then
  startx
fi
PROFILE

cat > /home/user/.xinitrc <<XINITRC
#!/bin/sh
openbox &
exec /usr/local/bin/${BINARY_NAME}
XINITRC
chmod +x /home/user/.xinitrc
chown user:user /home/user/.xinitrc /home/user/.profile

echo "--- Cleaning up ---"
apt-get clean
rm -f /etc/resolv.conf
SETUP_SCRIPT

# --- Run the setup script ---
chmod +x setup_chroot.sh
sudo mv setup_chroot.sh squashfs-root/

# --- FIX #2: Properly set up the chroot environment for network access ---
echo "🔧 Configuring networking for the chroot environment..."
sudo mount --bind /dev squashfs-root/dev
sudo mount --bind /proc squashfs-root/proc
sudo mount --bind /sys squashfs-root/sys
sudo cp /etc/resolv.conf squashfs-root/etc/

echo "🚀 Running system configuration inside chroot..."
sudo chroot squashfs-root /setup_chroot.sh

echo "🧹 Cleaning up chroot mounts..."
sudo umount squashfs-root/dev
sudo umount squashfs-root/proc
sudo umount squashfs-root/sys

# --- PHASE 3: Repack and Create Final ISO ---
echo "📦 Repacking the filesystem..."
sudo rm new_iso/live/filesystem.squashfs
sudo mksquashfs squashfs-root new_iso/live/filesystem.squashfs -comp xz -b 1M

echo "📝 Updating checksums..."
cd new_iso
# Use a pipe-friendly way to calculate md5sums
find . -type f -exec md5sum {} + | sudo tee md5sum.txt
cd ..

echo "🔥 Creating the final bootable ISO..."
ISO_NAME="${BINARY_NAME}-${DEBIAN_DISTRO}-live.iso"
sudo xorriso -as mkisofs \
  -o "../$ISO_NAME" \
  -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
  -c isolinux/boot.cat \
  -b isolinux/isolinux.bin \
  -no-emul-boot \
  -boot-load-size 4 \
  -boot-info-table \
  new_iso/

cd ..
echo ""
echo "🎉 SUCCESS! Your bootable Debian ISO is ready."
echo "   Location: $(pwd)/$ISO_NAME"